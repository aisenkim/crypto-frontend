{"version":3,"sources":["components/Navbar.jsx","components/Landing.jsx","api/index.js","store/index.js","components/ImageCard.js","components/CoinPrice.jsx","hook/useWindowPosition.js","components/Recommendation.jsx","components/HomePage.jsx","App.js","index.js"],"names":["useStyles","makeStyles","appbar","background","appbarTitle","flexGrow","fontFamily","appbarWrapper","width","margin","icon","color","fontSize","colorText","Navbar","classes","AppBar","className","elevation","Toolbar","IconButton","disabled","title","container","textAlign","goDown","StyledContainer","styled","Landing","useState","checked","setChecked","useEffect","id","Collapse","in","timeout","collapsedSize","to","smooth","api","axios","create","baseURL","apis","getBuySellPrice","exchange","symbol","get","GlobalStoreContext","createContext","GlobalStoreActionType","CardStyled","Card","ButtonGroupStyle","ToggleButtonGroup","ExchangeName","Typography","PriceTypography","ImageCard","props","React","alignment","setAlignment","store","useContext","CardContent","gutterBottom","variant","component","data","value","exclusive","onChange","event","newAlignment","cardIdx","onLoadExchanges","target","exchangeTwo","coinSymbolTwo","exchangeOne","coinSymbolOne","ToggleButton","buyPrice","sellPrice","CardActions","Button","size","CoinPrice","animation","setAnimation","useLayoutEffect","updatePosition","offSetHeight","window","document","getElementById","offsetHeight","pageYOffset","addEventListener","removeEventListener","useWindowPosition","setIsChecked","history","useHistory","loadedExchanges","map","idx","Grid","item","xs","sm","ButtonDiv","moneyText","Recommendation","buttonClicked","setButtonClicked","buyRecommend","setBuyRecommend","sellRecommend","setSellRecommend","setExchangeOne","setExchangeTwo","cryptocurrency","setCryptoCurrency","a","firstExchange","secondExchange","firstBuyPrice","parseFloat","replace","secondBuyPrice","firstSellPrice","secondSellPrice","price","FormControl","sx","m","minWidth","InputLabel","Select","labelId","label","MenuItem","onClick","HomePage","App","path","exact","AppWrapper","buySellPrice","setStore","storeReducer","action","type","payload","coinSymbol","response","status","console","log","asyncGetBuySellPrice","asyncOnLoadExchange","firstExchangePayload","secondExchangePayload","useGlobalStore","Provider","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a913a72a.chunk.js","sourcesContent":["import {AppBar, Toolbar, Typography, IconButton} from \"@mui/material\";\nimport {makeStyles} from '@mui/styles';\nimport SortIcon from '@mui/icons-material/Sort';\n\n// const useStyles = makeStyles((theme) => ({\n//     toolbar: {\n//         display: \"flex\",\n//         justifyContent : \"space-between\"\n//     },\n//     logoLg: {\n//       display: \"none\",\n//       [theme.breakpoints.up(\"sm\")] : {\n//           display: \"block\"\n//       }\n//     },\n//     logoSm: {\n//       display: \"block\",\n//       [theme.breakpoints.up(\"sm\")] : {\n//           display: \"none\"\n//       }\n//     }\n// }));\nconst useStyles = makeStyles({\n    appbar: {\n        background: [\"none\", \"!important\"],\n    },\n    appbarTitle: {\n        flexGrow: \"1\",\n        fontFamily: \"Nunito\",\n    },\n    appbarWrapper: {\n        width: \"80%\",\n        margin: \"0 auto\",\n    },\n    icon: {\n        color: \"#fff\",\n        fontSize: [\"2rem\", \"!important\"],\n    },\n    colorText: {\n        color: \"#5AFF3D\",\n    },\n});\n\nconst Navbar = () => {\n    const classes = useStyles();\n    return (\n        <AppBar className={classes.appbar} elevation={0}>\n            <Toolbar className={classes.appbarWrapper}>\n                <h1 className={classes.appbarTitle}>\n                    Coin <span className={classes.colorText}>Prices</span>\n                </h1>\n                <IconButton disabled>\n                    <SortIcon className={classes.icon} />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Navbar;","import {Collapse, IconButton} from \"@mui/material\";\nimport {makeStyles} from '@mui/styles';\nimport React, {useEffect, useState} from \"react\";\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {Link as Scroll} from \"react-scroll\";\nimport {styled} from \"@mui/system\";\n\nconst useStyles = makeStyles({\n    appbar: {\n        background: \"none\",\n    },\n    appbarTitle: {\n        flexGrow: \"1\",\n    },\n    appbarWrapper: {\n        width: \"80%\",\n        margin: \"0 auto\",\n    },\n    icon: {\n        color: \"#fff\",\n        fontSize: \"2rem\",\n    },\n    colorText: {\n        color: \"#5AFF3D\",\n    },\n    title: {\n        color: \"#fff\",\n        fontSize: \"4.5rem\",\n    },\n    container: {\n        textAlign: \"center\",\n    },\n    goDown: {\n        color: \"#5AFF3D\",\n        fontSize: [\"4rem\", \"!important\"],\n    },\n});\n\nconst StyledContainer = styled('div')`\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: Nunito, sans-serif;\n`\n\nconst Landing = () => {\n    const classes = useStyles();\n    const [checked, setChecked] = useState(false);\n    // for animation of container\n    useEffect(() => {\n        setChecked(true);\n    }, []);\n    return (\n        <StyledContainer id=\"landing\">\n            <Collapse\n                in={checked}\n                {...(checked ? {timeout: 1000} : {})}\n                collapsedSize={50}\n            >\n                <div className={classes.container}>\n                    <h1 className={classes.title}>\n                        Welcome to <br/> Coin{\" \"}\n                        <span className={classes.colorText}>Prices</span>\n                    </h1>\n                    <Scroll to=\"coin-price\" smooth={true}>\n                        <IconButton>\n                            <ExpandMoreIcon className={classes.goDown}/>\n                        </IconButton>\n                    </Scroll>\n                </div>\n            </Collapse>\n        </StyledContainer>\n    )\n}\n\nexport default Landing;","import axios from \"axios\";\nconst api = axios.create({\n  // baseURL: 'http://localhost:8080/api/v1'\n  //baseURL: \"http://localhost:9000/api/v1\", // for deployment\n  baseURL: \"http://aisencode.com/api/v1\", // for deployment\n});\n\nexport const getBuySellPrice = (exchange, symbol) =>\n  api.get(`/exchanges?exchange=${exchange}&coinSymbol=${symbol}`);\n\nconst apis = {\n  getBuySellPrice,\n};\n\nexport default apis;\n","import {createContext, useState} from \"react\";\nimport api from \"../api\";\n\n/**\n * This is our global data store.\n * Using FLUX design pattern\n * @author Aisen Kim\n */\n\nexport const GlobalStoreContext = createContext({});\n\nexport const GlobalStoreActionType = {\n    LOAD_PRICE: \"LOAD_PRICE\",\n    ON_LOAD_EXCHANGES: \"ON_LOAD_EXCHANGES\",\n}\n\n// MAKING IT AVAILABLE TO THE REST OF\n// THE APPLICATION\nexport const useGlobalStore = () => {\n\n    /**\n     * buySellPrice -> [{exchange: kraken, coin: BTC, buyPrice: 1300, sellPrice: 1320},\n     *                  {exchange: coinbase, coin: ETH, buyPrice: 5000, sellPrice: 5120}]\n     */\n\n        // THINGS THAT OUR DATA WILL MANAGE\n    const [store, setStore] = useState({\n            buySellPrice: [],\n            loadedExchanges: [],\n            exchangeOne: \"kraken\",\n            exchangeTwo: \"blockchain\",\n            coinSymbolOne: \"BTC\",\n            coinSymbolTwo: \"BTC\",\n        })\n\n    // REDUCER -> HANDLE EVERY TYPE OF STATE CHANGES\n    const storeReducer = (action) => {\n        const {type, payload} = action;\n        switch (type) {\n            case GlobalStoreActionType.LOAD_PRICE: {\n                return setStore({\n                    buySellPrice: payload\n                })\n            }\n            case GlobalStoreActionType.ON_LOAD_EXCHANGES: {\n                return setStore({\n                    loadedExchanges: payload.loadedExchanges,\n                    exchangeOne: payload.exchangeOne,\n                    exchangeTwo: payload.exchangeTwo,\n                    coinSymbolOne: payload.coinSymbolOne,\n                    coinSymbolTwo: payload.coinSymbolTwo\n                })\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // GET COIN PRICE FROM THE SERVER\n    store.getBuySellPrice = function (exchange, coinSymbol) {\n        async function asyncGetBuySellPrice(exchange, coinSymbol) {\n            const response = await api.getBuySellPrice(exchange, coinSymbol);\n            if (response.status === 200 && response.data) {\n                const payload = {\n                    \"exchange\": exchange,\n                    \"coin\": coinSymbol,\n                    \"buyPrice\": response.data.buyPrice,\n                    \"sellPrice\": response.data.sellPrice\n                }\n                const buySellPrice = [payload]\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_PRICE,\n                    payload: buySellPrice\n                })\n            } else {\n                console.log(\"API FAILED TO GET BUY SELL PRICE\")\n            }\n        }\n\n        asyncGetBuySellPrice(exchange, coinSymbol);\n    }\n\n    // Load default coin price of two exchanges on landing page\n    store.onLoadExchanges = function (exchangeOne = \"kraken\", coinSymbolOne = \"BTC\", exchangeTwo = \"blockchain\", coinSymbolTwo = \"BTC\") {\n        async function asyncOnLoadExchange() {\n            try {\n                const firstExchange = await api.getBuySellPrice(exchangeOne, coinSymbolOne);\n                const secondExchange = await api.getBuySellPrice(exchangeTwo, coinSymbolTwo);\n\n\n                const firstExchangePayload = {\n                    \"exchange\": exchangeOne,\n                    \"coin\": coinSymbolOne,\n                    \"buyPrice\": firstExchange.data.buyPrice,\n                    \"sellPrice\": firstExchange.data.sellPrice\n                }\n                const secondExchangePayload = {\n                    \"exchange\": exchangeTwo,\n                    \"coin\": coinSymbolTwo,\n                    \"buyPrice\": secondExchange.data.buyPrice,\n                    \"sellPrice\": secondExchange.data.sellPrice\n                }\n                storeReducer({\n                    type: GlobalStoreActionType.ON_LOAD_EXCHANGES,\n                    payload: {\n                        loadedExchanges: [firstExchangePayload, secondExchangePayload],\n                        exchangeOne,\n                        exchangeTwo,\n                        coinSymbolOne,\n                        coinSymbolTwo\n                    }\n                })\n            } catch (err) {\n                console.log(err);\n            }\n        }\n\n        asyncOnLoadExchange();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return {store, storeReducer}\n\n}\n\n\n\n","import React, {useContext} from \"react\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport {Collapse, ToggleButton, ToggleButtonGroup} from '@mui/material'\nimport {styled} from \"@mui/system\";\nimport {GlobalStoreContext} from \"../store\";\n\nconst CardStyled = styled(Card)`\n  //max-width: 645px;\n  background: rgba(0, 0, 0, 0.5);\n  margin: 3vw;\n`\n\nconst ButtonGroupStyle = styled(ToggleButtonGroup)`\n  margin-bottom: 0.5vh;\n`\n\nconst ExchangeName = styled(Typography)`\n  font-family: Nunito, sans-serif;\n  font-weight: bold;\n  font-size: 2rem;\n  color: #5AFF3D;\n`\n\nconst PriceTypography = styled(Typography)`\n  font-family: Nunito, sans-serif;\n  font-weight: bold;\n  font-size: 1.5rem;\n  color: #fff;\n`\n\n\nexport default function ImageCard(props) {\n    const [alignment, setAlignment] = React.useState('BTC');\n    const {store} = useContext(GlobalStoreContext)\n\n    const handleChange = (event, newAlignment) => {\n        setAlignment(newAlignment);\n        // check the value and call the api to get value\n        if (props.cardIdx === 0) {\n            store.onLoadExchanges(props.data.exchange, event.target.value, store.exchangeTwo, store.coinSymbolTwo);\n        } else {\n            store.onLoadExchanges(store.exchangeOne, store.coinSymbolOne, props.data.exchange, event.target.value);\n        }\n    };\n\n\n    return (\n        <Collapse in={props.checked} {...(props.checked ? {timeout: 1000} : {})}>\n            <CardStyled>\n                <CardContent>\n                    <ExchangeName\n                        gutterBottom\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        {props.data.exchange}\n                    </ExchangeName>\n                    <ButtonGroupStyle\n                        color=\"primary\"\n                        value={alignment}\n                        exclusive\n                        onChange={handleChange}\n                    >\n                        <ToggleButton value=\"BTC\">Bitcoin</ToggleButton>\n                        <ToggleButton value=\"ETH\">Ethereum</ToggleButton>\n                    </ButtonGroupStyle>\n                    <PriceTypography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                    >\n                        Buy Price: {props.data.buyPrice}<br/>\n                        Sell Price : {props.data.sellPrice}\n                        <br/>\n                        {/*Lizards are a widespread group of squamate reptiles, with over 6,000*/}\n                        {/*species, ranging across all continents except Antarctica*/}\n                    </PriceTypography>\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                        Share\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Learn More\n                    </Button>\n                </CardActions>\n            </CardStyled>\n        </Collapse>\n    );\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {GlobalStoreContext} from \"../store\";\nimport {useHistory} from \"react-router-dom\";\nimport useWindowPosition from \"../hook/useWindowPosition\";\nimport ImageCard from \"./ImageCard\";\nimport {styled} from \"@mui/system\";\nimport {Grid, IconButton} from \"@mui/material\";\nimport {makeStyles} from \"@mui/styles\";\nimport {Collapse} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport {Link as Scroll} from \"react-scroll\";\n\nconst StyledContainer = styled('div')`\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst useStyles = makeStyles({\n    appbar: {\n        background: \"none\",\n    },\n    appbarTitle: {\n        flexGrow: \"1\",\n    },\n    appbarWrapper: {\n        width: \"80%\",\n        margin: \"0 auto\",\n    },\n    icon: {\n        color: \"#fff\",\n        fontSize: \"2rem\",\n    },\n    colorText: {\n        color: \"#5AFF3D\",\n    },\n    title: {\n        color: \"#fff\",\n        fontSize: \"4.5rem\",\n    },\n    container: {\n        textAlign: \"center\",\n    },\n    goDown: {\n        color: \"#5AFF3D\",\n        fontSize: [\"4rem\", \"!important\"],\n    },\n});\n\nconst CoinPrice = () => {\n    const classes = useStyles();\n    const checked = useWindowPosition(\"landing\");\n    const [isChecked, setIsChecked] = useState(false);\n    const {store} = useContext(GlobalStoreContext)\n    store.history = useHistory();\n\n    useEffect(() => {\n        store.onLoadExchanges();\n        setIsChecked(true);\n    }, []);\n\n\n    function getBuySellPrice() {\n        // call with no parameters\n        store.getBuySellPrice(\"kraken\", \"BTC\")\n    }\n\n    function loadExchangeOnLoad() {\n        store.onLoadExchanges();\n    }\n\n    let buyPrice = \"\";\n    if (store) {\n        buyPrice = store.loadedExchanges.map((data, idx) => (\n            <Grid key={idx} item xs={12} sm={6}>\n                <ImageCard key={idx} checked={checked} data={data} cardIdx={idx}/>\n            </Grid>\n        ))\n    }\n\n    return (\n        <StyledContainer id=\"coin-price\">\n            {/*<Collapse*/}\n            {/*    in={checked}*/}\n            {/*    {...(checked ? {timeout: 1000} : {})}*/}\n            {/*    collapsedSize={50}*/}\n            {/*>*/}\n                <div className={classes.container}>\n                    <Grid container>\n                        {buyPrice}\n                    </Grid>\n                    <Scroll to=\"recommendation\" smooth={true}>\n                        <IconButton>\n                            <ExpandMoreIcon className={classes.goDown}/>\n                        </IconButton>\n                    </Scroll>\n                </div>\n            {/*</Collapse>*/}\n        </StyledContainer>\n    )\n}\n\nexport default CoinPrice;","import { useState, useLayoutEffect } from \"react\";\n\nexport default function useWindowPosition(id) {\n  const [animation, setAnimation] = useState(false);\n\n  useLayoutEffect(() => {\n    function updatePosition() {\n      const offSetHeight = window.document.getElementById(id).offsetHeight;\n      if (window.pageYOffset > offSetHeight * 0.7) {\n        setAnimation(true);\n      }\n    }\n\n    window.addEventListener(\"scroll\", updatePosition);\n    updatePosition();\n    return () => window.removeEventListener(\"scroll\", updatePosition);\n  }, [id]);\n\n  return animation;\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {GlobalStoreContext} from \"../store\";\nimport {useHistory} from \"react-router-dom\";\nimport {styled} from \"@mui/system\";\nimport {makeStyles} from \"@mui/styles\";\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from \"@mui/material/Button\";\nimport api from \"../api\";\n\nconst StyledContainer = styled('div')`\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ButtonDiv = styled('div')`\n  margin-top: 7vh;\n`;\n\nconst useStyles = makeStyles({\n    appbar: {\n        background: \"none\",\n    },\n    appbarTitle: {\n        flexGrow: \"1\",\n    },\n    appbarWrapper: {\n        width: \"80%\",\n        margin: \"0 auto\",\n    },\n    icon: {\n        color: \"#fff\",\n        fontSize: \"2rem\",\n    },\n    colorText: {\n        color: \"#f8f8f2\",\n    },\n    title: {\n        color: \"#5AFF3D\",\n        fontSize: \"4.5rem\",\n    },\n    moneyText : {\n     fontSize: \"2.5rem\"\n    },\n    container: {\n        textAlign: \"center\",\n    },\n    goDown: {\n        color: \"#5AFF3D\",\n        fontSize: [\"4rem\", \"!important\"],\n    },\n});\n\nconst Recommendation = () => {\n    const classes = useStyles();\n    const [buttonClicked, setButtonClicked] = React.useState(false);\n    const [buyRecommend, setBuyRecommend] = React.useState(null);\n    const [sellRecommend, setSellRecommend] = React.useState(null);\n\n    const [exchangeOne, setExchangeOne] = React.useState('');\n    const handleChangeExchangeOne = (event) => {\n        setExchangeOne(event.target.value);\n    };\n\n    const [exchangeTwo, setExchangeTwo] = React.useState('');\n    const handleChangeExchangeTwo = (event) => {\n        setExchangeTwo(event.target.value);\n    };\n\n    const [cryptocurrency, setCryptoCurrency] = React.useState('');\n    const handleChangeCrypto = (event) => {\n        setCryptoCurrency(event.target.value);\n    };\n\n    const {store} = useContext(GlobalStoreContext)\n    store.history = useHistory();\n\n\n    async function getRecommendation() {\n        const firstExchange = await api.getBuySellPrice(exchangeOne, cryptocurrency);\n        const secondExchange = await api.getBuySellPrice(exchangeTwo, cryptocurrency);\n\n        const firstBuyPrice = parseFloat(firstExchange.data.buyPrice.replace(/,/g, ''))\n        const secondBuyPrice = parseFloat(secondExchange.data.buyPrice.replace(/,/g, ''))\n        const firstSellPrice = parseFloat(firstExchange.data.sellPrice.replace(/,/g, ''))\n        const secondSellPrice = parseFloat(secondExchange.data.sellPrice.replace(/,/g, ''))\n\n        setBuyRecommend(firstBuyPrice < secondBuyPrice ? {\n                exchange: exchangeOne,\n                price: firstExchange.data.buyPrice\n            } :\n            {\n                exchange: exchangeTwo, price: secondExchange.data.buyPrice\n            })\n        setSellRecommend(firstSellPrice < secondSellPrice ? {\n                exchange: exchangeOne,\n                price: firstExchange.data.sellPrice\n            } :\n            {\n                exchange: exchangeTwo, price: secondExchange.data.sellPrice\n            })\n        setButtonClicked(true)\n    }\n\n    return (\n        <StyledContainer id=\"recommendation\">\n            <div className={classes.container}>\n                <h1 className={classes.title}>Compare Cryptocurrency</h1>\n                <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n                    <InputLabel id=\"demo-simple-select-standard-label\">Exchange</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-standard-label\"\n                        id=\"demo-simple-select-standard\"\n                        value={exchangeOne}\n                        onChange={handleChangeExchangeOne}\n                        label=\"ExchangeOne\"\n                    >\n                        <MenuItem value={\"kraken\"}>Kraken</MenuItem>\n                        <MenuItem value={\"blockchain\"}>Blockchain</MenuItem>\n                    </Select>\n                </FormControl>\n                <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n                    <InputLabel id=\"demo-simple-select-standard-label\">Exchange</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-standard-label\"\n                        id=\"demo-simple-select-standard\"\n                        value={exchangeTwo}\n                        onChange={handleChangeExchangeTwo}\n                        label=\"ExchangeTwo\"\n                    >\n                        <MenuItem value={\"kraken\"}>Kraken</MenuItem>\n                        <MenuItem value={\"blockchain\"}>Blockchain</MenuItem>\n                    </Select>\n                </FormControl>\n                <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n                    <InputLabel id=\"demo-simple-select-standard-label\">Cryptocurrency</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-standard-label\"\n                        id=\"demo-simple-select-standard\"\n                        value={cryptocurrency}\n                        onChange={handleChangeCrypto}\n                        label=\"cryptocurrency\"\n                    >\n                        <MenuItem value={\"BTC\"}>Bitcoin</MenuItem>\n                        <MenuItem value={\"ETH\"}>Ethereum</MenuItem>\n                    </Select>\n                </FormControl>\n                <ButtonDiv>\n                    <Button variant=\"contained\" onClick={getRecommendation}>Get Recommendation</Button>\n                </ButtonDiv>\n                {buttonClicked ?\n                    <div className={classes.container}>\n                        <h1 className={classes.moneyText}>Buy from: {buyRecommend.exchange} - <span className={classes.colorText}>${buyRecommend.price}</span></h1>\n                        <h1 className={classes.moneyText}>Sell from: {sellRecommend.exchange} - <span className={classes.colorText}>${sellRecommend.price}</span></h1>\n                    </div>\n                    :\n                    null\n                }\n            </div>\n\n        </StyledContainer>\n    )\n}\n\nexport default Recommendation;","import Landing from \"./Landing\";\nimport {CoinPrice} from \"./index\";\nimport React from \"react\";\nimport {styled} from \"@mui/system\";\nimport Recommendation from \"./Recommendation\";\n\nconst StyledContainer = styled('div')`\n  min-height: 100vh;\n  background: #757ce8;\n  background-repeat: no-repeat;\n  background-size: cover;\n`\n\nconst HomePage = () => {\n    return (\n        <StyledContainer>\n            <Landing/>\n            <CoinPrice/>\n            <Recommendation/>\n        </StyledContainer>\n    )\n}\n\nexport default HomePage\n","import React from \"react\";\n// import {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport HomePage from \"./components/HomePage\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {GlobalStoreContext, useGlobalStore} from \"./store\";\nimport '@fontsource/roboto'\n\nconst AppWrapper = () => {\n    const store = useGlobalStore();\n    return (\n        // <ThemeProvider theme={theme}>\n            <GlobalStoreContext.Provider value={store}>\n                <App/>\n            </GlobalStoreContext.Provider>\n        // </ThemeProvider>\n    )\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppWrapper/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}